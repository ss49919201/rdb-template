// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package book

import (
	"context"
	"database/sql"
	"time"
)

const createBook = `-- name: CreateBook :execresult

INSERT INTO
    books (title, published_at)
VALUES (
        ?,
        ?
    )
`

type CreateBookParams struct {
	Title       string
	PublishedAt time.Time
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBook, arg.Title, arg.PublishedAt)
}

const deleteBook = `-- name: DeleteBook :exec

DELETE FROM books WHERE id = ?
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one

SELECT id, title, version, published_at FROM books WHERE id = ? LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Version,
		&i.PublishedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many

SELECT id, title, version, published_at FROM books ORDER BY published_at
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Version,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :execresult

UPDATE books
SET
    title = COALESCE(?, title),
    version = version + 1
WHERE
    id = ?
    AND version = ?
`

type UpdateBookParams struct {
	Title   sql.NullString
	ID      int32
	Version int32
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateBook, arg.Title, arg.ID, arg.Version)
}
